remotes::install_github("https://github.com/isgauper/ordpatt2",build_vignettes = TRUE)
library(ordpatt2)
pi_i2
entropy(c(.5,.5))
entropy(c(.5,.26,.24))
#include <Rcpp.h>
#include <algorithm>
#include <vector>
using namespace Rcpp;
//Display elements of the array
// [[Rcpp::export]]
List perm2(IntegerVector input) {
pi_i
remotes::install_github("https://github.com/isgauper/ordpatt2",build_vignettes = TRUE)
setwd("~/ordpatt2_pkg/ordpatt2")
sourceCpp("./src/perm2.cpp")
library(Rcpp)
sourceCpp("./src/perm2.cpp")
sourceCpp("./src/pi_i2.cpp")
sourceCpp("./src/perm2.cpp")
OPseq2 <- function(TS, emb, lag=1){
# number of OP for lag = 1
el <- length(TS) - emb + 1
# OP sequence for lag = 1
seqOP <- vector()
for (i in 1:el){
seqOP[i] <- pi_i2(ind_pos(TS[i:(i + emb - 1)]))
}
# OP sequence for the given lag
return(seqOP[seq(1, el, lag)])
}
set.seed(1234567890, kind="Mersenne-Twister")
x <- rnorm(1000) # white noise
OPseq2(x, emb=4, lag=1)
sourceCpp("./src/perm2.cpp")
OPseq2(x, emb=4, lag=1)
ind_pos <- function(part){
v <- sort(unique(part))
count <- 0
pos <- vector()
for (i in 1:length(v)){
id <- which(part == v[i])
for (j in 1:length(id)){
count <- count + 1
pos[id[j]] <- count
}
}
return(pos-1)
}
OPseq2(x, emb=4, lag=1)
OPseq2
OPseq
library(StatOrdPattHxC)
OPseq(x, emb=4, lag=1)
OPseq(x, emb=4, lag=1)->a
OPseq2(x, emb=4, lag=1)->b
a==b
sum(a==b)
