remotes::install_github("https://github.com/isgauper/ordpatt2",build_vignettes = TRUE)
library(ordpatt2)
pi_i2
entropy(c(.5,.5))
entropy(c(.5,.26,.24))
#include <Rcpp.h>
#include <algorithm>
#include <vector>
using namespace Rcpp;
//Display elements of the array
// [[Rcpp::export]]
List perm2(IntegerVector input) {
pi_i
remotes::install_github("https://github.com/isgauper/ordpatt2",build_vignettes = TRUE)
remotes::install_github("https://github.com/isgauper/ordpatt2")
library(ordpatt2)
?OPseq2
set.seed(1234567890, kind="Mersenne-Twister")
x <- rnorm(1000) # white noise
OPseq2(x, emb=4, lag=1)
library(StatOrdPattHxC)
OPseq2(x, emb=4, lag=1) ->a
OPseq(x, emb=4, lag=1) ->b
sum(a!=b)
library(ordpatt2)
library(microbenchmark)
x <- rnorm(10000)
microbenchmark(
ordpatt2::OPseq2(x, 4, lag=2),
StatOrdPattHxC::OPseq(x, 4, lag=2)
)
?switch
library(StatOrdPattHxC)
browseVignettes("StatOrdPattHxC")
devtools::install_github("arey1911/StatOrdPattHxC", build_vignettes = TRUE, force=TRUE)
library(StatOrdPattHxC)
browseVignettes("StatOrdPattHxC")
int row = 0;
library(Rcpp)
sourceCpp("C:/Users/Emmy/Documents/ordpatt2_pkg/ordpatt2/src/perm2_v2.cpp")
perm2_v2(0:5)
perm2_v2(0:5)->p2
sourceCpp("C:/Users/Emmy/Documents/ordpatt2_pkg/ordpatt2/src/perm2.cpp")
perm2(0:5)->p1
p1==p2
sum(p1!=p2)
sourceCpp("C:/Users/Emmy/Documents/ordpatt2_pkg/ordpatt2/src/perm2_v2.cpp")
perm2_v2(0:4)->p4_2
perm2(0:4)->p4
sum(p4_2!=p4)
p4_2
pi_i2(0:5)
pi_i2(c(4,2,3,1))
pi_i2(c(4,2,3,1,0))
pi_i2(c(2,3,1,0))
pi_i2(c(2,3,0,1))
sourceCpp("C:/Users/Emmy/Documents/ordpatt2_pkg/ordpatt2/src/pi_i2_v2.cpp")
sourceCpp("C:/Users/Emmy/Documents/ordpatt2_pkg/ordpatt2/src/pi_i2_v2.cpp")
sourceCpp("C:/Users/Emmy/Documents/ordpatt2_pkg/ordpatt2/src/pi_i2_v2.cpp")
sourceCpp("C:/Users/Emmy/Documents/ordpatt2_pkg/ordpatt2/src/pi_i2_v2.cpp")
ind_pos
ind_pos <- function(part){
v <- sort(unique(part))
count <- 0
pos <- vector()
for (i in 1:length(v)){
id <- which(part == v[i])
for (j in 1:length(id)){
count <- count + 1
pos[id[j]] <- count
}
}
return(pos-1)
}
TS_temp = lynx
el <- length(TS_temp) - emb + 1
el <- length(TS_temp) - emb_temp + 1
emb_temp = 4
el <- length(TS_temp) - emb_temp + 1
seqOP_temp <- vector()
for (i in 1:el){
seqOP_temp[i] <- pi_i(ind_pos(TS_temp[i:(i + emb_temp - 1)]))
}
pi_i <- function(pat){
a <- length(pat) - 1
op <- as.data.frame(perm(0:a))
return(row.match(pat, op))
}
seqOP_temp <- vector()
for (i in 1:el){
seqOP_temp[i] <- pi_i(ind_pos(TS_temp[i:(i + emb_temp - 1)]))
}
perm <- function(v) {
n <- length(v)
if (n == 1) v
else {
X <- NULL
for (i in 1:n) X <- rbind(X, cbind(v[i], perm(v[-i])))
X
}
}
seqOP_temp <- vector()
for (i in 1:el){
seqOP_temp[i] <- pi_i(ind_pos(TS_temp[i:(i + emb_temp - 1)]))
}
library(prodlim)
seqOP_temp <- vector()
for (i in 1:el){
seqOP_temp[i] <- pi_i(ind_pos(TS_temp[i:(i + emb_temp - 1)]))
}
ind_pos(TS_temp[i:(i + emb_temp - 1)])
i=3
ind_pos(TS_temp[i:(i + emb_temp - 1)])
i=2
ind_pos(TS_temp[i:(i + emb_temp - 1)])
seqOP_temp
ip = ind_pos(TS_temp[i:(i + emb_temp - 1)])
pi_i(ip)
pi_i2_v2(ip)
seqOP_temp_v2 <- vector()
for (i in 1:el){
seqOP_temp_v2[i] <- pi_i2_v2(ind_pos(TS_temp[i:(i + emb_temp - 1)]))
}
sum(seqOP_temp != seqOP_temp_v2)
remotes::install_github("https://github.com/isgauper/ordpatt2",
INSTALL_opts = c("--install-tests"),build_vignettes = TRUE)
library(ordpatt2)
test_path <- system.file("tests/testthat", package = "ordpatt2")
test_path
testthat::test_dir(test_path)
remotes::install_github("https://github.com/isgauper/ordpatt2",
INSTALL_opts = c("--install-tests"),build_vignettes = TRUE)
test_path <- system.file("tests/testthat", package = "ordpatt2")
testthat::test_dir(test_path)
library(ordpatt2)
test_path <- system.file("tests/testthat", package = "ordpatt2")
test_path
testthat::test_dir(test_path)
browseVignettes("ordpatt2")
?HRenyi
?Tsallis
?HTsallis
?entropy
browseVignettes("StatOrdPattHxC")
?HFisher
?HRenyi
?HFisher
?HRenyi
?HShannon
?HTsallis
?HShannon
?HFisher
?HShannon
?HRenyi
ntropy(op.wn.z, method="Renyi", beta=2)
z <- rnorm(1000)
op.wn.z <- OPprob(z, emb=4)
op.wn.z <- OPprob2(z, emb=4)
entropy(op.wn.z, method="Fisher")
entropy(op.wn.z, method="Shannon")
entropy(op.wn.z, method="Renyi", beta=2)
entropy(op.wn.z, method="Tsallis")
?entropy
HFisher(op.wn.z)
library(StatOrdPattHxC)
HFisher(op.wn.z)
op.wn.z
sum(op.wn.z)
HFisher(1)
HFisher(c(.5))
HFisher(c(.5,.4))
HFisher(1
)
entropy(c(1))
test_that("Test  whether p of length 1 returns an error", {
expect_error(entropy(1), "ERROR: Not a valid probability function")
})
test_that("Test  whether a negative value in p returns an error", {
expect_error(entropy(c(.1,.4,-.1,.5)), "ERROR: Not a valid probability function")
})
entropy(c(.1,.4,-.1,.5)
)
c(.2,.4,-.1,.5)
sum(c(.2,.4,-.1,.5))
entropy(c(.2,.4,-.1,.5)
)
test_that("Test  whether a negative value in p returns an error", {
expect_error(entropy(c(.2,.4,-.1,.5)), "ERROR: Not a valid probability function")
})
test_that("Test whether sum(p) < 1 returns an error", {
expect_error(entropy(c(.4,.5,.1)), "ERROR: Not a valid probability function")
})
test_that("Test whether sum(p) < 1 returns an error", {
expect_error(entropy(c(.4,.5, .05)), "ERROR: Not a valid probability function")
})
test_that("Test whether sum(p) < 1 returns an error", {
expect_error(entropy(c(.4,.5, .15)), "ERROR: Not a valid probability function")
})
devtools::build_vignettes()
remotes::install_github("https://github.com/isgauper/ordpatt2",
INSTALL_opts = c("--install-tests"),build_vignettes = TRUE)
library(ordpatt2)
test_path <- system.file("tests/testthat", package = "ordpatt2")
test_path
testthat::test_dir(test_path)
library(testthat
)
testthat::test_dir(test_path)
testthat::test_dir(test_path, reporter = "verbose")
results <- testthat::test_dir(test_path, reporter = "silent")
results
test_that("Test whether outputs are the same as StatOrdPattHxC", {
expect_equal(
entropy(op.wn.4, method = "Shannon")[1],
StatOrdPattHxC::HShannon(op.wn.4)
)
expect_equal(
entropy(op.wn.4, method = "Fisher")[1],
StatOrdPattHxC::HFisher(op.wn.4)
)
expect_equal(
entropy(op.wn.5, method = "Renyi")[1],
StatOrdPattHxC::HRenyi(op.wn.5)
)
expect_equal(
entropy(op.wn.5, method = "Tsallis")[1],
StatOrdPattHxC::HTsallis(op.wn.5)
)
})
# Global test setup
set.seed(123)
x <- rnorm(1000)
op.wn.4 <- StatOrdPattHxC::OPprob(x, emb = 4)
op.wn.5 <- StatOrdPattHxC::OPprob(x, emb = 5)
test_that("Test whether outputs are the same as StatOrdPattHxC", {
expect_equal(
entropy(op.wn.4, method = "Shannon")[1],
StatOrdPattHxC::HShannon(op.wn.4)
)
expect_equal(
entropy(op.wn.4, method = "Fisher")[1],
StatOrdPattHxC::HFisher(op.wn.4)
)
expect_equal(
entropy(op.wn.5, method = "Renyi")[1],
StatOrdPattHxC::HRenyi(op.wn.5)
)
expect_equal(
entropy(op.wn.5, method = "Tsallis")[1],
StatOrdPattHxC::HTsallis(op.wn.5)
)
})
remotes::install_github("https://github.com/isgauper/ordpatt2",
INSTALL_opts = c("--install-tests"),build_vignettes = TRUE)
test_path <- system.file("tests/testthat", package = "ordpatt2")
testthat::test_dir(test_path)
# Global test setup
set.seed(123)
x <- rnorm(1000)
op.wn.4 <- StatOrdPattHxC::OPprob(x, emb = 4)
op.wn.5 <- StatOrdPattHxC::OPprob(x, emb = 5)
test_that("Test whether outputs are the same as StatOrdPattHxC", {
expect_equal(
entropy(op.wn.4, method = "Shannon")[1],
StatOrdPattHxC::HShannon(op.wn.4)
)
expect_equal(
entropy(op.wn.4, method = "Fisher")[1],
StatOrdPattHxC::HFisher(op.wn.4)
)
expect_equal(
entropy(op.wn.5, method = "Renyi")[1],
StatOrdPattHxC::HRenyi(op.wn.5)
)
expect_equal(
entropy(op.wn.5, method = "Tsallis")[1],
StatOrdPattHxC::HTsallis(op.wn.5)
)
})
library(ordpatt2)
testthat::test_dir(test_path)
devtools::build_vignettes()
library(StatOrdPattHxC)
?HFisher
setwd("~/ordpatt2_pkg/ordpatt2")
x <- rnorm(1000) # white noise
y <- mov.av(x, order=11) # smoothed with moving averages
opx <- OPprob2(x, emb=4)
library(ordpatt2)
opx <- OPprob2(x, emb=4)
opy <- OPprob2(y, emb=4)
plot(opx)
plot(opy)
devtools::build_vignettes()
